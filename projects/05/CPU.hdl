// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
    // Put your code here:
    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM); // writeM = instruction[3]
    // reg
    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=aluout, sel=instruction[15], out=aregin);
    Not(in=instruction[15], out=instruction15n);
    Or(a=instruction15n, b=instruction[5], out=aregload);
    ARegister(in=aregin, load=aregload, out=aregout, out[0..14]=addressM); // A reg
    And(a=instruction[4], b=instruction[15], out=dregload);
    DRegister(in=aluout, load=dregload, out=dregout); // D reg

    // alu
    Mux16(a=aregout, b=inM, sel=instruction[12], out=aluin);
    ALU(x=dregout,
        y=aluin,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=aluout,
        zr=j2,
        ng=j1);
    Or(a=j1, b=j2, out=j3tmp);
    Not(in=j3tmp, out=j3);


    // pc
    //   jump
    And(a=instruction[2], b=j1, out=j1o);
    And(a=instruction[1], b=j2, out=j2o);
    And(a=instruction[0], b=j3, out=j3o);
    Or(a=j1o, b=j2o, out=jtmp);
    Or(a=j3o, b=jtmp, out=jsel1);
    And(a=jsel1, b=instruction[15], out=jsel);
    // reset or jump or inc
    PC(in=aregout, load=jsel, inc=true, reset=reset, out[0..14]=pc);
}